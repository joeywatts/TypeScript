=== tests/cases/conformance/classes/members/privateNames/privateNameDestructuringAssignment.ts ===
class Test {
>Test : Symbol(Test, Decl(privateNameDestructuringAssignment.ts, 0, 0))

    #myPropDefault = 23;
>#myPropDefault : Symbol(Test[#myPropDefault], Decl(privateNameDestructuringAssignment.ts, 0, 12))

    #myProp: number;
>#myProp : Symbol(Test[#myProp], Decl(privateNameDestructuringAssignment.ts, 1, 24))

    constructor() {
        ({ value: this.#myProp } = { value: 10 });
>value : Symbol(value, Decl(privateNameDestructuringAssignment.ts, 4, 10))
>this.#myProp : Symbol(Test[#myProp], Decl(privateNameDestructuringAssignment.ts, 1, 24))
>this : Symbol(Test, Decl(privateNameDestructuringAssignment.ts, 0, 0))
>value : Symbol(value, Decl(privateNameDestructuringAssignment.ts, 4, 36))

        ({ something: this.#myProp } = { something: this.#myPropDefault });
>something : Symbol(something, Decl(privateNameDestructuringAssignment.ts, 5, 10))
>this.#myProp : Symbol(Test[#myProp], Decl(privateNameDestructuringAssignment.ts, 1, 24))
>this : Symbol(Test, Decl(privateNameDestructuringAssignment.ts, 0, 0))
>something : Symbol(something, Decl(privateNameDestructuringAssignment.ts, 5, 40))
>this.#myPropDefault : Symbol(Test[#myPropDefault], Decl(privateNameDestructuringAssignment.ts, 0, 12))
>this : Symbol(Test, Decl(privateNameDestructuringAssignment.ts, 0, 0))
    }
}

